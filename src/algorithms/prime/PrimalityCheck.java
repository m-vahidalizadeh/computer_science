package algorithms.prime;

/**
 * Created by Mohammad on 9/19/2016.
 */
public class PrimalityCheck {

    public static boolean isPrime(long n) {
        if(n < 2) return false;
        if(n == 2 || n == 3) return true;
        if(n%2 == 0 || n%3 == 0) return false;
        long sqrtN = (long)Math.sqrt(n)+1;
        for(long i = 6L; i <= sqrtN; i += 6) {
            if(n%(i-1) == 0 || n%(i+1) == 0) return false;
        }
        return true;
    }

    /**
     * test primes
     179424691	179425033	179425601	179426083
     179424697	179425063	179425619	179426089
     179424719	179425069	179425637	179426111
     179424731	179425097	179425657	179426123
     179424743	179425133	179425661	179426129
     179424779	179425153	179425693	179426141
     179424787	179425171	179425699	179426167
     179424793	179425177	179425709	179426173
     179424797	179425237	179425711	179426183
     179424799	179425261	179425777	179426231
     179424821	179425319	179425811	179426239
     179424871	179425331	179425817	179426263
     179424887	179425357	179425819	179426321
     179424893	179425373	179425823	179426323
     179424899	179425399	179425849	179426333
     179424907	179425403	179425859	179426339
     179424911	179425423	179425867	179426341
     179424929	179425447	179425879	179426353
     179424937	179425453	179425889	179426363
     179424941	179425457	179425907	179426369
     179424977	179425517	179425943	179426407
     179424989	179425529	179425993	179426447
     179425003	179425537	179426003	179426453
     179425019	179425559	179426029	179426491
     179425027	179425579	179426081	179426549
     more primes for test: http://www.bigprimes.net/archive/prime/100001/
     * @param args
     */

    public static void main(String[] args) {
        long n = 179424691;
        System.out.println(isPrime(n));
    }

}
